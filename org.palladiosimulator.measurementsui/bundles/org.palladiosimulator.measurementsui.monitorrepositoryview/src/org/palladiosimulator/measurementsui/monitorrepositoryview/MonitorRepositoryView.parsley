import java.util.ArrayList
import org.palladiosimulator.edp2.models.measuringpoint.MeasuringPoint
import org.palladiosimulator.monitorrepository.Monitor
import org.palladiosimulator.monitorrepository.MeasurementSpecification
import org.palladiosimulator.monitorrepository.MonitorRepository
import org.palladiosimulator.measurementsui.monitorrepositoryview.MonitorRepositorySaveableTreeFormView
import org.palladiosimulator.monitorrepository.ProcessingType
import org.palladiosimulator.measurementsui.wizardmodel.WizardModelType

/* mpview EMF Parsley Dsl Module file */
module monitorrepositoryview {
	parts {
		viewpart monitorrepositoryview {
			viewname "MonitorRepositoryView"
			viewclass MonitorRepositorySaveableTreeFormView
		}
	}
	
	viewerContentProvider {
		children {
			Monitor mon -> {
				new ArrayList() => [
					addAll(mon.measurementSpecifications)
				]
			}
			MeasuringPoint -> #[]
		}
	}

	labelProvider {
		text {
			Monitor mon -> {
				if (mon.measuringPoint !== null) {
					mon.entityName + " [" + mon.measuringPoint.toString.replaceAll("\\[[^\\[]*\\]$", "") + "]";
				} else {
					mon.entityName + " [There is no MeasuringPoint set!]";
				}
			}

			MeasurementSpecification ms -> {
				"MeasurementSpecification: " + ms.metricDescription.getName
			}
			ProcessingType proc -> {
				// Remove the "[TRANSIENT]" substring from the label 
				proc.toString.replaceAll("\\[[^\\[]*\\]$", "")
			}
		}

		image {
			Monitor mon -> if (mon.activated) {
				"ActiveIcon.png"
			} else {
				"InactiveIcon.png"
			}
			MeasurementSpecification ms -> if (ms.isTriggersSelfAdaptations)
				"self_adaption.png"
			else
				"nonself_adaption.png"
			MeasuringPoint -> "MeasuringPoint.png"
			ProcessingType -> "ProcessingType.png"

		}
	}

	menuBuilder {
		menus {
			MonitorRepository mr -> #[				
				actionUndo,
				actionRedo,
				separator,
				actionPaste
			]
		}

		emfMenus{
			MonitorRepository mr -> #[]

			Monitor monitor -> #[]

			MeasuringPoint measuringPoint -> #[]

			MeasurementSpecification measurement -> #[]

			ProcessingType processing -> #[]
		}
	}
}